//ACTUAL SOLUTION
#include <stdio.h>
#include <string.h>
 
int isParentheses(char ch)
{
    if(ch == '(' || ch == ')')
        return 1;
 
    return 0;
}
 
struct Parantheses
{
    char ptype;  //o for open and c for close parentheses
    int positionIndex;
    int matched;
    int prevUnMatchedCount; //Used only for (
    int nextUnMatchedCount; //Used only for )
};
 
 
int main()
{
    char input[100];
    scanf("%s",input);
    int LEN = strlen(input); //Length of the string
 
    int TOTALPARANTHESESCOUNT=0;
    int CLOSEPARANTHESESCOUNT=0;
    int index;
 
    for(index = 0; index < LEN; index++)
    {
        if(isParentheses(input[index]))
        {
            if(input[index] == ')')
            {
                CLOSEPARANTHESESCOUNT++;
            }
            TOTALPARANTHESESCOUNT++;
        }
    }
 
    struct Parantheses paranthesesList[TOTALPARANTHESESCOUNT];
    int paranthesesCount=0;
    int unMatchedOpenParanthesesCount=0;
    int unMatchedCloseParanthesesCount=CLOSEPARANTHESESCOUNT;
 
    for(index = 0; index < LEN; index++)
    {
        if(isParentheses(input[index]))
        {
            if(input[index] == '(')
            {
                unMatchedOpenParanthesesCount++;
                paranthesesList[paranthesesCount].ptype='o';
                paranthesesList[paranthesesCount].positionIndex=index;
                paranthesesList[paranthesesCount].matched=0;
                paranthesesList[paranthesesCount].prevUnMatchedCount = unMatchedOpenParanthesesCount-1;
 
            }
            else
            {
                unMatchedCloseParanthesesCount--;
                paranthesesList[paranthesesCount].ptype='c';
                paranthesesList[paranthesesCount].positionIndex=index;
                paranthesesList[paranthesesCount].matched=0;
                paranthesesList[paranthesesCount].nextUnMatchedCount = unMatchedCloseParanthesesCount;
 
                if(unMatchedOpenParanthesesCount > 0)
                {
                    unMatchedOpenParanthesesCount--;
                }
            }
 
            paranthesesCount++;
        }
    }
 
    //Process Matching
    for(paranthesesCount = 0; paranthesesCount < TOTALPARANTHESESCOUNT; paranthesesCount++)
    {
        if(paranthesesList[paranthesesCount].ptype == 'c')
        {
            int prevParanthesesIndex = paranthesesCount-1;
            while(prevParanthesesIndex >= 0)
            {
                if(paranthesesList[prevParanthesesIndex].ptype == 'o' && paranthesesList[prevParanthesesIndex].matched == 0)
                {
                    //Check if subsequent parantheses and sufficient present further to match
                    if(input[paranthesesList[prevParanthesesIndex].positionIndex+1] == '(' &&
                            paranthesesList[paranthesesCount].nextUnMatchedCount < paranthesesList[prevParanthesesIndex].prevUnMatchedCount)
                    {
                        //Do nothing .. Search for previous open bracket
 
                    }
                    else
                    {
                        paranthesesList[prevParanthesesIndex].matched=1;
                        paranthesesList[paranthesesCount].matched=1;
                        break;
                    }
                }
 
                prevParanthesesIndex--;
            }
        }
    }
 
 
    //Print the output
    paranthesesCount=0;
    for(index = 0; index < LEN; index++)
    {
        if(isParentheses(input[index]))
        {
            if(paranthesesList[paranthesesCount].matched == 1)
            {
                printf("%c",input[index]);
            }
            paranthesesCount++;
        }
        else
        {
            printf("%c",input[index]);
        }
 
    }
 
    return 0;
}

//MY ATTEMPT
#include <iostream>
#include <vector>
using namespace std;

int main(int argc, char** argv){
    string a;
    cin>>a;
    int count=0;
    int o_count=0,c_count=0;
    vector<char>brac;
    vector<int>pos;
    //bool open=false;
    int x=0,y=a.length();
    /*while(a[x]=='(' && a[x+1]=='(' && a[y-1]==')'){
        /*a.erase(a.begin());
        a.erase(a.end()-1);
        x++;y--;
    }*/
    for(int i=x;i<y;i++){
        if(a[i]=='('){
            brac.push_back(a[i]);
            pos.push_back(i);
            //open=true;
            o_count++;
            count++;
        }
        else if(a[i]==')'){
            if(count>0){
                /*if(brac.size()==3/*brac[brac.size()-1]==')' && brac[brac.size()-2]!=')'){
                    brac.erase(brac.begin());
                    pos.erase(pos.begin());
                }*/
                brac.pop_back();
                pos.pop_back();
                count--;//open=false;
            }
            else{
                brac.push_back(a[i]);
                pos.push_back(i);
            }
        }
    }
    /*for(int i=0;i<brac.size();i++){
        cout<<brac[i]<<"-"<<pos[i]<<"       ";
    }*/
    while(brac[0]=='(' && brac[brac.size()-1]==')'){
        brac.erase(brac.begin());
        brac.erase(brac.end()-1);
        pos.erase(pos.begin());
        pos.erase(pos.end()-1);
    }
    int i=0,k=0;
    while(i<pos.size()){
        a.erase(a.begin()+pos[i]-k);
        i++;k++;
    }
    cout<<a;
    return 1;
}
